name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v0.1.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: macos
            arch: aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            asset_name: VLDB-Toolkits_macos_aarch64.app.tar.gz

          - platform: macos
            arch: x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            asset_name: VLDB-Toolkits_macos_x86_64.app.tar.gz

          # Windows build
          - platform: windows
            arch: x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: VLDB-Toolkits_windows_x86_64.msi

          # Linux build
          - platform: linux
            arch: x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: VLDB-Toolkits_linux_x86_64.AppImage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Linux dependencies
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      # Install npm dependencies
      - name: Install frontend dependencies
        working-directory: ./app
        run: npm install

      # Build Tauri app
      - name: Build Tauri app
        working-directory: ./app
        run: npm run tauri:build -- --target ${{ matrix.target }}

      # Package macOS builds
      - name: Package macOS build
        if: matrix.platform == 'macos'
        run: |
          cd app/src-tauri/target/${{ matrix.target }}/release/bundle/macos
          tar -czf ${{ matrix.asset_name }} VLDB-Toolkits.app
          mv ${{ matrix.asset_name }} ${{ github.workspace }}/

      # Find and rename Windows build
      - name: Package Windows build
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          $msiPath = Get-ChildItem -Path "app/src-tauri/target/${{ matrix.target }}/release/bundle/msi" -Filter "*.msi" | Select-Object -First 1
          Copy-Item $msiPath.FullName -Destination "${{ github.workspace }}/${{ matrix.asset_name }}"

      # Find and rename Linux build
      - name: Package Linux build
        if: matrix.platform == 'linux'
        run: |
          find app/src-tauri/target/${{ matrix.target }}/release/bundle/appimage -name "*.AppImage" -exec cp {} ${{ github.workspace }}/${{ matrix.asset_name }} \;

      # Upload artifacts
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/*/*.tar.gz
            ./artifacts/*/*.msi
            ./artifacts/*/*.AppImage

  publish-pypi:
    name: Publish to PyPI
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Sync package version from tag
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_NO_V="${VERSION#v}"
          echo "Using version: ${VERSION_NO_V}"
          sed -i.bak -E "s/^version = \"[0-9]+\.[0-9]+\.[0-9]+\"/version = \"${VERSION_NO_V}\"/" release/python-pip/pyproject.toml
          sed -i.bak -E "s/^__version__ = \"[0-9]+\.[0-9]+\.[0-9]+\"/__version__ = \"${VERSION_NO_V}\"/" release/python-pip/vldb_toolkits/__init__.py
          sed -i.bak -E "s/^VERSION = \"[0-9]+\.[0-9]+\.[0-9]+\"/VERSION = \"${VERSION_NO_V}\"/" release/python-pip/vldb_toolkits/config.py
          rm -f release/python-pip/*.bak release/python-pip/vldb_toolkits/*.bak

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        working-directory: ./release/python-pip
        run: python -m build

      - name: Publish to PyPI
        working-directory: ./release/python-pip
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      - name: Publish to TestPyPI (optional)
        if: false  # Set to true to enable
        working-directory: ./release/python-pip
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: twine upload --repository testpypi dist/*

  publish-npm:
    name: Publish to npm
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Sync package version from tag
        working-directory: ./release/node.js-npm
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          VERSION_NO_V="${VERSION#v}"
          echo "Using version: ${VERSION_NO_V}"
          npm version --no-git-tag-version "${VERSION_NO_V}"

      - name: Install dependencies
        working-directory: ./release/node.js-npm
        run: npm install

      - name: Run tests
        working-directory: ./release/node.js-npm
        run: npm test

      - name: Publish to npm
        working-directory: ./release/node.js-npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish
